[gd_scene load_steps=60 format=2]

[ext_resource path="res://scripts/Global.gd" type="Script" id=1]
[ext_resource path="res://assets/effects/vignette.png" type="Texture" id=2]
[ext_resource path="res://assets/ui/ingame/Health_Bkg.png" type="Texture" id=3]
[ext_resource path="res://assets/tiles/floor_burnt.png" type="Texture" id=4]
[ext_resource path="res://assets/tiles/floor.png" type="Texture" id=5]
[ext_resource path="res://assets/tiles/meta_light.png" type="Texture" id=6]
[ext_resource path="res://assets/tiles/floor_mossy.png" type="Texture" id=7]
[ext_resource path="res://assets/tiles/wall.png" type="Texture" id=8]
[ext_resource path="res://assets/tiles/meta_spawnpoint.png" type="Texture" id=9]
[ext_resource path="res://assets/tiles/floor_grasspatch.png" type="Texture" id=10]
[ext_resource path="res://assets/ui/MenuBackground.png" type="Texture" id=11]
[ext_resource path="res://assets/tiles/meta_light_block.png" type="Texture" id=12]
[ext_resource path="res://assets/tiles/void.png" type="Texture" id=13]
[ext_resource path="res://assets/tiles/missing.png" type="Texture" id=14]
[ext_resource path="res://assets/tiles/meta.png" type="Texture" id=15]
[ext_resource path="res://assets/tiles/meta_clip.png" type="Texture" id=16]
[ext_resource path="res://assets/ui/Button_Unpressed.png" type="Texture" id=17]
[ext_resource path="res://assets/tiles/meta_kill.png" type="Texture" id=18]
[ext_resource path="res://assets/tiles/meta_spawnpoint_enemy.png" type="Texture" id=19]
[ext_resource path="res://assets/ui/ingame/Health_Progress.png" type="Texture" id=20]
[ext_resource path="res://scenes/Player.tscn" type="PackedScene" id=21]
[ext_resource path="res://scripts/CanvasLayer.gd" type="Script" id=22]
[ext_resource path="res://scripts/Multiplayer.gd" type="Script" id=23]
[ext_resource path="res://scripts/MultiplayerPackets.gd" type="Script" id=24]
[ext_resource path="res://scripts/Game.gd" type="Script" id=25]
[ext_resource path="res://assets/ui/fonts/Jost-Medium.ttf" type="DynamicFontData" id=26]
[ext_resource path="res://assets/ui/fonts/Jost-Light.ttf" type="DynamicFontData" id=27]
[ext_resource path="res://assets/ui/fonts/Jost-Bold.ttf" type="DynamicFontData" id=28]
[ext_resource path="res://scripts/Entities.gd" type="Script" id=29]
[ext_resource path="res://assets/ui/Button_Pressed.png" type="Texture" id=30]
[ext_resource path="res://assets/sfx/laserShoot.wav" type="AudioStream" id=31]
[ext_resource path="res://scripts/Sounds.gd" type="Script" id=32]
[ext_resource path="res://assets/sfx/walk.wav" type="AudioStream" id=33]
[ext_resource path="res://assets/sfx/wallhit.wav" type="AudioStream" id=34]
[ext_resource path="res://assets/sfx/enemyhit.wav" type="AudioStream" id=35]
[ext_resource path="res://assets/ui/menus/connecting1.png" type="Texture" id=36]
[ext_resource path="res://assets/ui/menus/connecting2.png" type="Texture" id=37]
[ext_resource path="res://assets/ui/fonts/Jost-Black.ttf" type="DynamicFontData" id=38]
[ext_resource path="res://assets/ui/menus/connecting3.png" type="Texture" id=39]
[ext_resource path="res://assets/ui/menus/connecting4.png" type="Texture" id=40]
[ext_resource path="res://assets/sfx/hover.wav" type="AudioStream" id=41]
[ext_resource path="res://assets/effects/background.png" type="Texture" id=42]

[sub_resource type="OccluderPolygon2D" id=1]
polygon = PoolVector2Array( 32, 32, 0, 32, 0, 0, 32, 0 )

[sub_resource type="ConvexPolygonShape2D" id=2]
points = PoolVector2Array( 32, 32, 0, 32, 0, 0, 32, 0 )

[sub_resource type="TileSet" id=3]
0/name = "missing.png 0"
0/texture = ExtResource( 14 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 32, 32 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape_one_way = false
0/shape_one_way_margin = 0.0
0/shapes = [  ]
0/z_index = 0
1/name = "void.png 1"
1/texture = ExtResource( 13 )
1/tex_offset = Vector2( 0, 0 )
1/modulate = Color( 1, 1, 1, 1 )
1/region = Rect2( 0, 0, 32, 32 )
1/tile_mode = 0
1/occluder_offset = Vector2( 0, 0 )
1/navigation_offset = Vector2( 0, 0 )
1/shape_offset = Vector2( 0, 0 )
1/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
1/shape_one_way = false
1/shape_one_way_margin = 0.0
1/shapes = [  ]
1/z_index = 0
2/name = "meta.png 2"
2/texture = ExtResource( 15 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 0, 0, 32, 32 )
2/tile_mode = 0
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape_one_way = false
2/shape_one_way_margin = 0.0
2/shapes = [  ]
2/z_index = 0
3/name = "meta_light.png 3"
3/texture = ExtResource( 6 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 0, 32, 32 )
3/tile_mode = 0
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape_one_way = false
3/shape_one_way_margin = 0.0
3/shapes = [  ]
3/z_index = 0
4/name = "meta_light_block.png 4"
4/texture = ExtResource( 12 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 0, 0, 32, 32 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shape_offset = Vector2( 0, 0 )
4/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
4/shape_one_way = false
4/shape_one_way_margin = 0.0
4/shapes = [  ]
4/z_index = 0
5/name = "meta_clip.png 5"
5/texture = ExtResource( 16 )
5/tex_offset = Vector2( 0, 0 )
5/modulate = Color( 1, 1, 1, 1 )
5/region = Rect2( 0, 0, 32, 32 )
5/tile_mode = 0
5/occluder_offset = Vector2( 0, 0 )
5/navigation_offset = Vector2( 0, 0 )
5/shape_offset = Vector2( 0, 0 )
5/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
5/shape_one_way = false
5/shape_one_way_margin = 0.0
5/shapes = [  ]
5/z_index = 0
6/name = "meta_kill.png 6"
6/texture = ExtResource( 18 )
6/tex_offset = Vector2( 0, 0 )
6/modulate = Color( 1, 1, 1, 1 )
6/region = Rect2( 0, 0, 32, 32 )
6/tile_mode = 0
6/occluder_offset = Vector2( 0, 0 )
6/navigation_offset = Vector2( 0, 0 )
6/shape_offset = Vector2( 0, 0 )
6/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
6/shape_one_way = false
6/shape_one_way_margin = 0.0
6/shapes = [  ]
6/z_index = 0
7/name = "meta_spawnpoint.png 7"
7/texture = ExtResource( 9 )
7/tex_offset = Vector2( 0, 0 )
7/modulate = Color( 1, 1, 1, 1 )
7/region = Rect2( 0, 0, 32, 32 )
7/tile_mode = 0
7/occluder_offset = Vector2( 0, 0 )
7/navigation_offset = Vector2( 0, 0 )
7/shape_offset = Vector2( 0, 0 )
7/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
7/shape_one_way = false
7/shape_one_way_margin = 0.0
7/shapes = [  ]
7/z_index = 0
8/name = "meta_spawnpoint_enemy.png 8"
8/texture = ExtResource( 19 )
8/tex_offset = Vector2( 0, 0 )
8/modulate = Color( 1, 1, 1, 1 )
8/region = Rect2( 0, 0, 32, 32 )
8/tile_mode = 0
8/occluder_offset = Vector2( 0, 0 )
8/navigation_offset = Vector2( 0, 0 )
8/shape_offset = Vector2( 0, 0 )
8/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
8/shape_one_way = false
8/shape_one_way_margin = 0.0
8/shapes = [  ]
8/z_index = 0
9/name = "floor.png 9"
9/texture = ExtResource( 5 )
9/tex_offset = Vector2( 0, 0 )
9/modulate = Color( 1, 1, 1, 1 )
9/region = Rect2( 0, 0, 32, 32 )
9/tile_mode = 0
9/occluder_offset = Vector2( 0, 0 )
9/navigation_offset = Vector2( 0, 0 )
9/shape_offset = Vector2( 0, 0 )
9/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
9/shape_one_way = false
9/shape_one_way_margin = 0.0
9/shapes = [  ]
9/z_index = 0
10/name = "wall.png 10"
10/texture = ExtResource( 8 )
10/tex_offset = Vector2( 0, 0 )
10/modulate = Color( 1, 1, 1, 1 )
10/region = Rect2( 0, 0, 32, 32 )
10/tile_mode = 0
10/occluder_offset = Vector2( 0, 0 )
10/occluder = SubResource( 1 )
10/navigation_offset = Vector2( 0, 0 )
10/shape_offset = Vector2( 0, 0 )
10/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
10/shape = SubResource( 2 )
10/shape_one_way = false
10/shape_one_way_margin = 1.0
10/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 2 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
10/z_index = 0
11/name = "floor_burnt.png 11"
11/texture = ExtResource( 4 )
11/tex_offset = Vector2( 0, 0 )
11/modulate = Color( 1, 1, 1, 1 )
11/region = Rect2( 0, 0, 32, 32 )
11/tile_mode = 0
11/occluder_offset = Vector2( 0, 0 )
11/navigation_offset = Vector2( 0, 0 )
11/shape_offset = Vector2( 0, 0 )
11/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
11/shape_one_way = false
11/shape_one_way_margin = 0.0
11/shapes = [  ]
11/z_index = 0
12/name = "floor_mossy.png 12"
12/texture = ExtResource( 7 )
12/tex_offset = Vector2( 0, 0 )
12/modulate = Color( 1, 1, 1, 1 )
12/region = Rect2( 0, 0, 32, 32 )
12/tile_mode = 0
12/occluder_offset = Vector2( 0, 0 )
12/navigation_offset = Vector2( 0, 0 )
12/shape_offset = Vector2( 0, 0 )
12/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
12/shape_one_way = false
12/shape_one_way_margin = 0.0
12/shapes = [  ]
12/z_index = 0
13/name = "floor_grasspatch.png 13"
13/texture = ExtResource( 10 )
13/tex_offset = Vector2( 0, 0 )
13/modulate = Color( 1, 1, 1, 1 )
13/region = Rect2( 0, 0, 32, 32 )
13/tile_mode = 0
13/occluder_offset = Vector2( 0, 0 )
13/navigation_offset = Vector2( 0, 0 )
13/shape_offset = Vector2( 0, 0 )
13/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
13/shape_one_way = false
13/shape_one_way_margin = 0.0
13/shapes = [  ]
13/z_index = 0

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform sampler2D vignette;

void fragment() {
	vec3 vignette_color = texture(vignette, UV).rgb;
	// Screen texture stores gaussian blurred copies on mipmaps.
	COLOR.rgb = textureLod(SCREEN_TEXTURE, SCREEN_UV, (1.0 - vignette_color.r) * 4.0).rgb;
	COLOR.rgb *= texture(vignette, UV).rgb;
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/vignette = ExtResource( 2 )

[sub_resource type="Shader" id=17]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 1920, 1080 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 8.0
shader_param/roll_size = 0.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.05
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.03
shader_param/brightness = 1.4
shader_param/discolor = false
shader_param/warp_amount = 1.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[sub_resource type="DynamicFont" id=11]
font_data = ExtResource( 27 )

[sub_resource type="StyleBoxFlat" id=12]
bg_color = Color( 0.6, 0.6, 0.6, 0 )

[sub_resource type="DynamicFont" id=6]
font_data = ExtResource( 28 )

[sub_resource type="DynamicFont" id=16]
font_data = ExtResource( 26 )

[sub_resource type="DynamicFont" id=8]
font_data = ExtResource( 28 )

[sub_resource type="DynamicFont" id=9]
size = 15
font_data = ExtResource( 27 )

[sub_resource type="AnimatedTexture" id=14]
flags = 4
frames = 4
fps = 10.4
frame_0/texture = ExtResource( 36 )
frame_1/texture = ExtResource( 37 )
frame_1/delay_sec = 0.0
frame_2/texture = ExtResource( 39 )
frame_2/delay_sec = 0.0
frame_3/texture = ExtResource( 40 )
frame_3/delay_sec = 0.0

[sub_resource type="DynamicFont" id=15]
font_data = ExtResource( 38 )

[sub_resource type="Environment" id=10]
background_mode = 4
glow_enabled = true
adjustment_enabled = true

[sub_resource type="AudioStreamRandomPitch" id=13]
audio_stream = ExtResource( 31 )

[node name="Game" type="Node2D"]
position = Vector2( -1, 0 )
script = ExtResource( 25 )

[node name="TileMap" type="TileMap" parent="."]
modulate = Color( 0.99, 0.99, 0.99, 1 )
tile_set = SubResource( 3 )
cell_size = Vector2( 32, 32 )
cell_custom_transform = Transform2D( 32, 0, 0, 32, 0, 0 )
show_collision = true
format = 1

[node name="Player" parent="." instance=ExtResource( 21 )]
position = Vector2( 129, 132 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
script = ExtResource( 22 )

[node name="Vignette" type="Sprite" parent="CanvasLayer"]
visible = false
material = SubResource( 5 )
position = Vector2( 960, 540 )
scale = Vector2( 15, 8.4375 )
texture = ExtResource( 2 )

[node name="VHS" type="Sprite" parent="CanvasLayer"]
material = SubResource( 18 )
position = Vector2( 960, 540 )
scale = Vector2( 15, 8.4375 )
texture = ExtResource( 42 )

[node name="Debug" type="Control" parent="CanvasLayer"]
anchor_left = 0.87
anchor_top = 0.021
anchor_right = 1.0
anchor_bottom = 0.171
margin_left = -4.40015
margin_top = 0.319998
margin_bottom = 0.319992

[node name="position_text" type="Label" parent="CanvasLayer/Debug"]
anchor_right = 0.397
anchor_bottom = 0.104
margin_left = 147.0
margin_top = 2.0
margin_right = 148.023
margin_bottom = 9.152
grow_horizontal = 0
custom_fonts/font = SubResource( 11 )
text = "Position:"
align = 2

[node name="rawposition_text" type="Label" parent="CanvasLayer/Debug"]
anchor_top = 0.104
anchor_right = 0.603
anchor_bottom = 0.207
margin_left = 93.0
margin_top = 7.152
margin_right = 95.977
margin_bottom = 14.466
grow_horizontal = 0
custom_fonts/font = SubResource( 11 )
text = "Raw Position:"
align = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="velocity_text" type="Label" parent="CanvasLayer/Debug"]
anchor_top = 0.303
anchor_right = 0.418
anchor_bottom = 0.406
margin_left = 139.0
margin_top = -2.086
margin_right = 143.062
margin_bottom = 5.228
grow_horizontal = 0
rect_pivot_offset = Vector2( 45.1321, -34.5946 )
custom_fonts/font = SubResource( 11 )
text = "Velocity: "
align = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="latency_text" type="Label" parent="CanvasLayer/Debug"]
anchor_top = 0.696
anchor_right = 0.418
anchor_bottom = 0.8
margin_left = 143.0
margin_top = 0.248001
margin_right = 143.062
margin_bottom = 7.39999
grow_horizontal = 0
rect_pivot_offset = Vector2( 36.6277, 1.84822 )
custom_fonts/font = SubResource( 11 )
text = "Latency:"
align = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="connected_text" type="Label" parent="CanvasLayer/Debug"]
anchor_top = 0.593
anchor_right = 0.674
anchor_bottom = 0.696
margin_left = 70.0
margin_top = -6.06599
margin_right = 77.966
margin_bottom = 1.24801
grow_horizontal = 0
rect_pivot_offset = Vector2( 36.6277, 1.84822 )
custom_fonts/font = SubResource( 11 )
text = "Not Connected"
align = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Chat" type="Control" parent="CanvasLayer"]
anchor_top = 0.743
anchor_right = 0.31
anchor_bottom = 1.0
margin_top = -4.43994
margin_right = -2.20001
margin_bottom = -1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Messages" type="RichTextLabel" parent="CanvasLayer/Chat"]
margin_right = 467.0
margin_bottom = 239.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Message" type="TextEdit" parent="CanvasLayer/Chat"]
margin_top = 253.0
margin_right = 227.0
margin_bottom = 282.0
custom_styles/normal = SubResource( 12 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Send" type="Button" parent="CanvasLayer/Chat"]
margin_left = 227.0
margin_top = 252.0
margin_right = 299.0
margin_bottom = 282.0
custom_fonts/font = SubResource( 6 )
text = "Send"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HUD" type="Control" parent="CanvasLayer"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="HealthBar" type="Control" parent="CanvasLayer/HUD"]
anchor_right = 0.056
anchor_bottom = 0.036
margin_right = 0.479996
margin_bottom = 0.119999

[node name="TextureProgress" type="TextureProgress" parent="CanvasLayer/HUD/HealthBar"]
anchor_right = 0.394
anchor_bottom = 0.974
margin_right = 0.0439911
margin_bottom = 0.0139999
value = 100.0
texture_under = ExtResource( 3 )
texture_progress = ExtResource( 20 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Stats" type="Control" parent="CanvasLayer/HUD"]
anchor_top = 0.035
anchor_right = 0.033
anchor_bottom = 0.073
margin_top = 0.200001
margin_right = -0.360001
margin_bottom = 0.159996

[node name="Coins" type="Label" parent="CanvasLayer/HUD/Stats"]
margin_right = 40.0
margin_bottom = 14.0
custom_colors/font_color = Color( 1, 0.964706, 0.568627, 1 )
custom_fonts/font = SubResource( 16 )
text = "Coins: 0"

[node name="Kills" type="Label" parent="CanvasLayer/HUD/Stats"]
margin_top = 24.0
margin_right = 60.0
margin_bottom = 48.0
custom_colors/font_color = Color( 0.643137, 1, 0.568627, 1 )
custom_fonts/font = SubResource( 16 )
text = "Enemies Killed: 0"

[node name="Enemies" type="Label" parent="CanvasLayer/HUD/Stats"]
margin_top = 49.0
margin_right = 125.0
margin_bottom = 73.0
custom_colors/font_color = Color( 0.568627, 0.72549, 1, 1 )
custom_fonts/font = SubResource( 16 )
text = "Enemies Left: 0"

[node name="FPS" type="Label" parent="CanvasLayer/HUD"]
anchor_top = 0.198
anchor_right = 0.397
anchor_bottom = 0.302
margin_left = 1846.0
margin_top = -213.84
margin_right = 1157.76
margin_bottom = -301.16
grow_horizontal = 0
custom_fonts/font = SubResource( 11 )
text = "FPS:"
align = 2

[node name="GameMenu" type="Control" parent="CanvasLayer"]
visible = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="CanvasLayer/GameMenu"]
margin_right = 1920.0
margin_bottom = 1080.0
color = Color( 0, 0, 0, 0.784314 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="NinePatchRect" type="NinePatchRect" parent="CanvasLayer/GameMenu"]
margin_left = 860.0
margin_top = 440.0
margin_right = 1060.0
margin_bottom = 640.0
rect_scale = Vector2( 0.958061, 1 )
texture = ExtResource( 11 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/GameMenu/NinePatchRect"]
margin_left = 11.0
margin_top = 16.0
margin_right = 189.0
margin_bottom = 192.0
rect_scale = Vector2( 0.997914, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer"]
margin_right = 178.0
margin_bottom = 24.0
custom_fonts/font = SubResource( 8 )
text = "Menu"
align = 1
valign = 1
uppercase = true

[node name="MarginContainer" type="MarginContainer" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer"]
margin_top = 28.0
margin_right = 178.0
margin_bottom = 28.0

[node name="Resume" type="TextureButton" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer"]
margin_left = 39.0
margin_top = 32.0
margin_right = 139.0
margin_bottom = 62.0
rect_min_size = Vector2( 100, 30 )
size_flags_horizontal = 4
texture_normal = ExtResource( 17 )
texture_pressed = ExtResource( 30 )

[node name="Label" type="Label" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer/Resume"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -50.0
margin_top = -15.5
margin_right = 50.0
margin_bottom = 15.5
custom_fonts/font = SubResource( 9 )
text = "Resume"
align = 1
valign = 1

[node name="Options" type="TextureButton" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer"]
margin_left = 39.0
margin_top = 66.0
margin_right = 139.0
margin_bottom = 96.0
rect_min_size = Vector2( 100, 30 )
size_flags_horizontal = 4
texture_normal = ExtResource( 17 )
texture_pressed = ExtResource( 30 )

[node name="Label" type="Label" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer/Options"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_fonts/font = SubResource( 9 )
text = "Options"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Exit_to_menu" type="TextureButton" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer"]
margin_left = 39.0
margin_top = 100.0
margin_right = 139.0
margin_bottom = 130.0
rect_min_size = Vector2( 100, 30 )
size_flags_horizontal = 4
texture_normal = ExtResource( 17 )
texture_pressed = ExtResource( 30 )

[node name="Label" type="Label" parent="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer/Exit_to_menu"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -2.0
margin_top = -2.0
margin_right = -2.0
margin_bottom = -2.0
custom_fonts/font = SubResource( 9 )
text = "Exit to Menu"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Loading" type="Control" parent="CanvasLayer"]
visible = false
margin_right = 1920.0
margin_bottom = 1080.0

[node name="ColorRect" type="ColorRect" parent="CanvasLayer/Loading"]
margin_right = 1920.0
margin_bottom = 1080.0
color = Color( 0, 0, 0, 1 )

[node name="TextureRect" type="TextureRect" parent="CanvasLayer/Loading"]
margin_left = 896.0
margin_top = 212.0
margin_right = 1024.0
margin_bottom = 340.0
texture = SubResource( 14 )
expand = true

[node name="Label" type="Label" parent="CanvasLayer/Loading"]
margin_left = 866.5
margin_top = 357.0
margin_right = 1053.5
margin_bottom = 381.0
custom_fonts/font = SubResource( 15 )
text = "Connecting to server...."
align = 1
valign = 1

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0.482353, 0.482353, 0.482353, 1 )

[node name="Players" type="Node" parent="."]
script = ExtResource( 23 )

[node name="Global" type="Node" parent="."]
script = ExtResource( 1 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 10 )

[node name="Packets" type="Node" parent="."]
script = ExtResource( 24 )

[node name="Entities" type="Node" parent="."]
script = ExtResource( 29 )

[node name="Sounds" type="Node" parent="."]
script = ExtResource( 32 )

[node name="Hover" type="AudioStreamPlayer" parent="Sounds"]
stream = ExtResource( 41 )

[node name="Shoot" type="AudioStreamPlayer" parent="Sounds"]
stream = SubResource( 13 )

[node name="Walk" type="AudioStreamPlayer" parent="Sounds"]
stream = ExtResource( 33 )

[node name="WallHit" type="AudioStreamPlayer" parent="Sounds"]
stream = ExtResource( 34 )

[node name="EnemyHit" type="AudioStreamPlayer" parent="Sounds"]
stream = ExtResource( 35 )

[node name="Tween" type="Tween" parent="."]

[connection signal="pressed" from="CanvasLayer/Chat/Send" to="Players" method="_on_Send_pressed"]
[connection signal="pressed" from="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer/Resume" to="." method="_on_Resume_pressed"]
[connection signal="pressed" from="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer/Options" to="CanvasLayer" method="_on_Options_pressed"]
[connection signal="pressed" from="CanvasLayer/GameMenu/NinePatchRect/VBoxContainer/Exit_to_menu" to="CanvasLayer" method="_on_Exit_to_menu_pressed"]
